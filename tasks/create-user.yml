# It creates a new user with the given parameters.
# In addition, it configures a new keypair for ssh authentication.

# Initialize default parameters
- name: Set defaults
  connection: local
  set_fact:
    # Default ssh key-file path
    ssh_key_file: "{{ ssh_key_file | default(lookup('env', 'HOME') + '/.ssh/' + inventory_hostname + '/' + username + '/rsa') }}"
    # By default don't use any ssh passphrase
    ssh_passphrase: "{{ ssh_passphrase | default(None) }}"

- name: Ensures secrets directory exists
  file:
    path: "{{ ssh_key_file | dirname }}"
    state: directory
    recurse: yes
  delegate_to: localhost

- name: Protect secrets directory's content
  file:
    path: "{{ ssh_key_file | dirname }}"
    state: directory
    owner: "{{ local_user | default(lookup('env', 'USER')) }}"
    group: "{{ local_group | default(lookup('env', 'USER')) }}"
    mode: '0700'
  delegate_to: localhost

# Generate keypair for the user
- name: "Generate openssh key for the user on such host: {{ username }}"
  community.crypto.openssh_keypair:
    path: "{{ ssh_key_file }}"
    passphrase: "{{ ssh_passphrase }}"
  delegate_to: localhost

# Create the user
- name: "Create user {{ username }}"
  block:
    - name: "Create user {{ username }} [1/2 - Create the user]"
      user:
        name: "{{ username }}"
        password: "{{ password }}"
        state: present
        groups: "{{ user_groups | default([]) }}"
        append: true
        create_home: true
        shell: /bin/bash

    - name: "Create user {{ username }} [2/2 - Set authorized key for remote user]"
      authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ lookup('file', ssh_key_file + '.pub') }}"
        exclusive: True
  become: true

- name: Add the host in the local ssh configuration
  community.general.ssh_config:
    host: "{{ item_host }}-{{ username }}"
    user: "{{ local_user | default(lookup('env', 'USER')) }}"
    group: "{{ local_group | default(lookup('env', 'USER')) }}"
    remote_user: "{{ username }}"
    hostname: "{{ item_host }}"
    identity_file: "{{ ssh_key_file }}"
    state: present
  delegate_to: localhost  # Uses local pipenv instead of system python (`connection: local`)
  loop: "{{ [hostvars[inventory_hostname].get('ansible_host', inventory_hostname)] | union([inventory_hostname]) }}"
  loop_control:
    loop_var: item_host
