---

# ###############################
# First login
# ###############################

# Check if the host is reachable. If it isn't, try the first login and change the password

- name: Check if host is reachable
  wait_for:
    timeout: 0
  register: connect_rs
  ignore_unreachable: true

- name: If host unreachable, try to perform first-time login and user setup
  block:
    # Save new-user credentials
    - name: If unreachable [1/4 - save new user credentials]
      connection: local
      set_fact:
        ansible_new_login_username: "{{ ansible_user }}"
        ansible_new_login_password: "{{ ansible_password | default(ansible_first_login_password) }}"

    - name: If unreachable [2/4 - change the password if required]
      delegate_to: localhost
      expect:
        command: sshpass -p {{ ansible_first_login_password }} ssh {{ ansible_ssh_common_args | default('') }} {{ ansible_first_login_user }}@{{ ansible_host }}
        timeout: 5
        responses:
          "Current password:": "{{ ansible_first_login_password }}"
          "New password:": "{{ ansible_new_login_password }}"
          "Retype new password:": "{{ ansible_new_login_password }}"
      ignore_errors: true

    - name: If unreachable [3/4 - create/edit the admin account]
      include_tasks: create-user.yml
      vars:
        # Custom vars
        username: "{{ ansible_new_login_username }}"
        password: "{{ lookup('password', '~/secrets/' + inventory_hostname + '/' + ansible_new_login_username + '/password.txt chars=ascii_letters,digits length=15 encrypt=sha512_crypt') }}"
        ssh_key_file: "{{ '~/.secrets/' + inventory_hostname + '/' + ansible_new_login_username + '/rsa' }}"
        user_groups:
          - sudo
        # Ansible: forward authentication vars
        ansible_user: "{{ ansible_first_login_user }}"
        ansible_password: "{{ ansible_first_login_password }}"
        ansible_become_pass: "{{ ansible_first_login_password }}"

    - name: If unreachable [4/4 - remove first-login account (if not root)]
      ansible.builtin.user:
        name: "{{ ansible_first_login_user }}"
        state: absent
        remove: yes
        force: yes
      when: ansible_first_login_user != 'root'
      become: true
  when: connect_rs is unreachable

# ###############################
# User setup and protection
# ###############################

# Create all the administration accounts with sudo privileges
# that are passwordless. Furthermore, disable login to the
# "root" user.

- name: Add administrators
  include_tasks: create-user.yml
  vars:
    username: "{{ item.username }}"
    password: "{{ item.password | default(lookup('password', '~/secrets/' + inventory_hostname + '/' + item.username + '/password.txt chars=ascii_letters,digits length=15 encrypt=sha512_crypt'))"
    user_groups:
      - sudo
    ssh_key_file: "{{ item.ssh.key_file | default('~/secrets/' + inventory_hostname + '/' + item.username + '/rsa') }}"
    ssh_passphrase: "{{ item.ssh.passphrase }}"
  loop: "{{ admin_accounts }}"

- name: Add users
  include_tasks: create-user.yml
  vars:
    username: "{{ item.username }}"
    password: "{{ item.password | default(lookup('password', '~/secrets/' + inventory_hostname + '/' + item.username + '/password.txt chars=ascii_letters,digits length=15 encrypt=sha512_crypt'))"
    ssh_key_file: "{{ item.ssh.key_file | default('~/secrets/' + inventory_hostname + '/' + item.username + '/rsa') }}"
    ssh_passphrase: "{{ item.ssh.passphrase }}"
  loop: "{{ user_accounts }}"

- name: Disable root account
  block:
    - name: Disable root account [1/2 - No password neither shell]
      user:
        name: root
        password: '!'
        shell: /sbin/nologin

    - name: Disable root account [2/2 - Disable SSH login]
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'
  become: true

- name: Disable password authentication
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication no'
  become: true

# ###############################
# Packages and updates
# ###############################

# Update all packages and refresh apt cache daily.
# Furthermore, ensure that the basic system software
# and tools are installed on the system.

- name: Ensure that all packages are updated and upgraded
  apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 86400 #One day
  become: true

- name: Ensure basic software is present
  block:
    - name: Ensure basic software is present [1/2 - install aptitude]
      apt:
        name: aptitude
        state: latest
        force_apt_get: yes

    - name: Ensure basic software is present [2/2 - install system packages]
      apt:
        name: "{{ apt.tools }}"
  become: true

# ###############################
# Host configuration
# ###############################

# Update the hostame of the machine and its
# configuration in /etc/hosts.
# It will point your hostname to 127.0.0.1.

- name: Set hostname [1/2 - update /etc/hosts]
  lineinfile:
    path: /etc/hosts
    search_string: "{{ ansible_hostname }}"
    line: "127.0.0.1 {{ inventory_hostname }}"
  become: true

- name: Set hostname [2/2 - update system hostname]
  hostname:
    name: "{{ inventory_hostname }}"
  become: true

# ###############################
# Timezone configuration
# ###############################

- name: Set timezone
  community.general.timezone:
    name: "{{ timezone }}"
  become: true

# ###############################
# Network configuration
# ###############################

# TODO
# Set static IP
# Optionally configure AP mode

# ###############################
# Firewall configuration
# ###############################

# Setup default configuration
- name: Allow limited ssh connection
  community.general.ufw:
    default: "{{ firewall.default_incoming }}"
    direction: incoming

- name: Allow limited ssh connection
  community.general.ufw:
    default: "{{ firewall.default_outgoing }}"
    direction: outgoing

# Open ssh port
# ufw will deny connections if an IP
# address has attempted to initiate 6 or more connections in the last
# 30 seconds. See  http://www.debian-administration.org/articles/187
- name: Allow limited ssh connection
  community.general.ufw:
    rule: limit
    port: ssh
    proto: tcp